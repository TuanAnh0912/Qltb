//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace qltb.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class qltbEntities : DbContext
    {
        public qltbEntities()
            : base("name=qltbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BaiHocSuDungThietBi> BaiHocSuDungThietBis { get; set; }
        public virtual DbSet<CanBoThietBi> CanBoThietBis { get; set; }
        public virtual DbSet<ChiTietBaiHocSuDungThietBi> ChiTietBaiHocSuDungThietBis { get; set; }
        public virtual DbSet<ChiTietPhieuDeNghiMuaSam> ChiTietPhieuDeNghiMuaSams { get; set; }
        public virtual DbSet<ChiTietPhieuGhiGiamThietBi> ChiTietPhieuGhiGiamThietBis { get; set; }
        public virtual DbSet<ChiTietPhieuGhiHongThietBi> ChiTietPhieuGhiHongThietBis { get; set; }
        public virtual DbSet<ChiTietPhieuGhiMatThietBi> ChiTietPhieuGhiMatThietBis { get; set; }
        public virtual DbSet<ChiTietPhieuKiemKe> ChiTietPhieuKiemKes { get; set; }
        public virtual DbSet<ChiTietPhieuSuaChua> ChiTietPhieuSuaChuas { get; set; }
        public virtual DbSet<ChiTietThietBi> ChiTietThietBis { get; set; }
        public virtual DbSet<ChucNang> ChucNangs { get; set; }
        public virtual DbSet<ChucVu> ChucVus { get; set; }
        public virtual DbSet<ChuongTrinhHoc> ChuongTrinhHocs { get; set; }
        public virtual DbSet<DonVi> DonVis { get; set; }
        public virtual DbSet<DonViTinh> DonViTinhs { get; set; }
        public virtual DbSet<FileTrongPhieuDeNghiMuaSam> FileTrongPhieuDeNghiMuaSams { get; set; }
        public virtual DbSet<FileTrongPhieuGhiGiam> FileTrongPhieuGhiGiams { get; set; }
        public virtual DbSet<FileTrongPhieuGhiHong> FileTrongPhieuGhiHongs { get; set; }
        public virtual DbSet<FileTrongPhieuGhiMat> FileTrongPhieuGhiMats { get; set; }
        public virtual DbSet<FileTrongPhieuGhiTang> FileTrongPhieuGhiTangs { get; set; }
        public virtual DbSet<FileTrongPhieuKiemKe> FileTrongPhieuKiemKes { get; set; }
        public virtual DbSet<FileTrongPhieuSuaChua> FileTrongPhieuSuaChuas { get; set; }
        public virtual DbSet<GiaoVien> GiaoViens { get; set; }
        public virtual DbSet<GioiTinh> GioiTinhs { get; set; }
        public virtual DbSet<HocKy> HocKies { get; set; }
        public virtual DbSet<Huyen> Huyens { get; set; }
        public virtual DbSet<KhoiLop> KhoiLops { get; set; }
        public virtual DbSet<KhoiLopTieuChuan> KhoiLopTieuChuans { get; set; }
        public virtual DbSet<KhoiPhongTieuChuan> KhoiPhongTieuChuans { get; set; }
        public virtual DbSet<KhoiTruong> KhoiTruongs { get; set; }
        public virtual DbSet<KhoPhong> KhoPhongs { get; set; }
        public virtual DbSet<KhoThietBi> KhoThietBis { get; set; }
        public virtual DbSet<KieuSuDungKhoPhong> KieuSuDungKhoPhongs { get; set; }
        public virtual DbSet<LienKetKhoiLopThietBi> LienKetKhoiLopThietBis { get; set; }
        public virtual DbSet<LienKetNguoiDungChucVu> LienKetNguoiDungChucVus { get; set; }
        public virtual DbSet<LienKetNguoiNguoiDungPhongBan> LienKetNguoiNguoiDungPhongBans { get; set; }
        public virtual DbSet<LienKetThietBiPhieuMuon> LienKetThietBiPhieuMuons { get; set; }
        public virtual DbSet<LienKetTietHocPhieuMuon> LienKetTietHocPhieuMuons { get; set; }
        public virtual DbSet<LoaiBaiHoc> LoaiBaiHocs { get; set; }
        public virtual DbSet<LoaiKhoPhong> LoaiKhoPhongs { get; set; }
        public virtual DbSet<LoaiPhieuMuon> LoaiPhieuMuons { get; set; }
        public virtual DbSet<LoaiPhuTrach> LoaiPhuTraches { get; set; }
        public virtual DbSet<LoaiThayDoi> LoaiThayDois { get; set; }
        public virtual DbSet<LoaiThietBi> LoaiThietBis { get; set; }
        public virtual DbSet<LoaiThietBiTieuChuan> LoaiThietBiTieuChuans { get; set; }
        public virtual DbSet<LogPhieuMuon> LogPhieuMuons { get; set; }
        public virtual DbSet<LogThietBi> LogThietBis { get; set; }
        public virtual DbSet<Lop> Lops { get; set; }
        public virtual DbSet<MonHoc> MonHocs { get; set; }
        public virtual DbSet<MonHocTieuChuan> MonHocTieuChuans { get; set; }
        public virtual DbSet<MucDichSuDung> MucDichSuDungs { get; set; }
        public virtual DbSet<NguoiDung> NguoiDungs { get; set; }
        public virtual DbSet<NguonCap> NguonCaps { get; set; }
        public virtual DbSet<NguonKinhPhiCapTren> NguonKinhPhiCapTrens { get; set; }
        public virtual DbSet<NguonNganSach> NguonNganSaches { get; set; }
        public virtual DbSet<NhomChucNang> NhomChucNangs { get; set; }
        public virtual DbSet<NhomNguoiDung> NhomNguoiDungs { get; set; }
        public virtual DbSet<PhieuDeNghiMuaSam> PhieuDeNghiMuaSams { get; set; }
        public virtual DbSet<PhieuGhiGiamThietBi> PhieuGhiGiamThietBis { get; set; }
        public virtual DbSet<PhieuGhiHongThietBi> PhieuGhiHongThietBis { get; set; }
        public virtual DbSet<PhieuGhiMatThietBi> PhieuGhiMatThietBis { get; set; }
        public virtual DbSet<PhieuGhiTangThietBi> PhieuGhiTangThietBis { get; set; }
        public virtual DbSet<PhieuGhiTangThietBi_ChiTietThietBi> PhieuGhiTangThietBi_ChiTietThietBi { get; set; }
        public virtual DbSet<PhieuKiemKe> PhieuKiemKes { get; set; }
        public virtual DbSet<PhieuMuon> PhieuMuons { get; set; }
        public virtual DbSet<PhieuSuaChua> PhieuSuaChuas { get; set; }
        public virtual DbSet<Phong> Phongs { get; set; }
        public virtual DbSet<PhongBan> PhongBans { get; set; }
        public virtual DbSet<QuyDinhSoTietSuDungThietBi> QuyDinhSoTietSuDungThietBis { get; set; }
        public virtual DbSet<QuyDinhSuDungSoTiet> QuyDinhSuDungSoTiets { get; set; }
        public virtual DbSet<QuyenTruyCap> QuyenTruyCaps { get; set; }
        public virtual DbSet<SuDungPhong> SuDungPhongs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ThietBi> ThietBis { get; set; }
        public virtual DbSet<ThietBiTieuChuan> ThietBiTieuChuans { get; set; }
        public virtual DbSet<ThoiKhoaBieuPhong> ThoiKhoaBieuPhongs { get; set; }
        public virtual DbSet<TietHoc> TietHocs { get; set; }
        public virtual DbSet<TieuChuanCoSoVatChat> TieuChuanCoSoVatChats { get; set; }
        public virtual DbSet<TieuChuanPhong> TieuChuanPhongs { get; set; }
        public virtual DbSet<Tinh> Tinhs { get; set; }
        public virtual DbSet<ToBoMon> ToBoMons { get; set; }
        public virtual DbSet<TrangThaiHongMat> TrangThaiHongMats { get; set; }
        public virtual DbSet<TrangThaiPhieuMuon> TrangThaiPhieuMuons { get; set; }
        public virtual DbSet<TrangTraiPhong> TrangTraiPhongs { get; set; }
        public virtual DbSet<VaiTroCanBo> VaiTroCanBoes { get; set; }
        public virtual DbSet<Xa> Xas { get; set; }
        public virtual DbSet<XepHangKhoPhong> XepHangKhoPhongs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
